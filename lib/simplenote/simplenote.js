// Generated by CoffeeScript 1.6.2
/*
@class SimpleNote
*/


(function() {
  var SimpleNote,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SimpleNote = (function() {
    function SimpleNote() {
      this.selection = __bind(this.selection, this);
      this.save = __bind(this.save, this);
      var root,
        _this = this;

      this.timeout = null;
      this.interval = null;
      root = null;
      this.nodes = obs([]);
      this.tags = obs([]);
      this.current = obs({
        read: function() {
          return _this.nodes.find("current");
        },
        write: function(id) {
          _this.nodes.find("current").current(false);
          return _this.nodes.find("id", id).current(true);
        }
      });
      this.breadcrumbs = obs(function() {
        return _this.current().parents();
      });
      this.bookmarks = obs(function() {
        if (_this.nodes[1]) {
          return _this.nodes.filter("bookmarked");
        } else {
          return [];
        }
      });
      this.current.extend({
        throttle: 10
      });
      this.breadcrumbs.extend({
        throttle: 10
      });
      this.bookmarks.extend({
        throttle: 10
      });
    }

    SimpleNote.prototype.toJSON = function() {
      return {
        nodes: this.nodes(),
        tags: this.tags()
      };
    };

    SimpleNote.prototype.fromJSON = function(data) {
      var node, nodes, tag, tags;

      nodes = (function() {
        var _i, _len, _ref, _results;

        _ref = data.nodes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          _results.push(SimpleNote.Node.fromJSON(node));
        }
        return _results;
      })();
      tags = (function() {
        var _i, _len, _ref, _results;

        _ref = data.tags;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tag = _ref[_i];
          _results.push(SimpleNote.Tag.fromJSON(tag));
        }
        return _results;
      })();
      this.nodes(nodes);
      this.tags(tags);
      return this;
    };

    SimpleNote.prototype.save = function() {
      timout.clear(this.timeout);
      this.timeout = timeout.set(100, function() {
        return localStorage.notes = JSON.stringify(this.self);
      });
      return this;
    };

    SimpleNote.prototype.create = function() {
      var $doc, error, json,
        _this = this;

      try {
        json = JSON.parse(localStorage.notes, revive);
      } catch (_error) {
        error = _error;
        this.root = SimpleNote.Node({
          smplnt: this,
          parent: obs(null, {
            title: obs("home")
          })
        });
      }
      $doc = $(document);
      $doc.on("click", ".headline", function(e) {
        var $t;

        $t = $(e.target);
        if (!$t.is(".bullet, .action, .ellipsis, .additional")) {
          return $t.parents(".headline").find("title").focus();
        }
      });
      $doc.on("keydown", wre.HotKeyHandler(this.hotkeys, this));
      $doc.on("keyup, click", function() {
        return _this.save();
      });
      this.pop = $("<audio>").attr({
        src: "snd/pop.mp3"
      }).appendTo("body")[0];
      this.startPeriodicalSave();
      return this;
    };

    SimpleNote.prototype.startPeriodicalSave = function() {
      this.interval = interval.set(6e4, this.save);
      return this;
    };

    SimpleNote.prototype.stopPeriodicalSave = function() {
      interval.clear(this.interval);
      return this;
    };

    SimpleNote.prototype.selection = function() {
      var selected,
        _this = this;

      selected = this.selected();
      return {
        remove: function() {
          if (confirm("really delete all selected outlines?")) {
            _this.nodes.removeAll(selected);
            _this.save();
            return _this;
          }
        },
        unselect: function() {
          var node, _i, _len;

          for (_i = 0, _len = selected.length; _i < _len; _i++) {
            node = selected[_i];
            node.selected(false)();
          }
          return _this;
        },
        invert: function() {
          var node, _i, _len;

          for (_i = 0, _len = selected.length; _i < _len; _i++) {
            node = selected[_i];
            node.selected(!node.selected())();
          }
          return _this;
        },
        archive: function() {
          var node, _i, _len, _results;

          _results = [];
          for (_i = 0, _len = selected.length; _i < _len; _i++) {
            node = selected[_i];
            _results.push(node.archived(true)());
          }
          return _results;
        },
        editTags: function() {}
      };
    };

    return SimpleNote;

  })();

  (window || exports).SimpleNote = SimpleNote;

}).call(this);

// Generated by CoffeeScript 1.6.2
(function() {
  var interval, isArr, isFn, isNum, isObj, isStr, koMap, obs, revive, sizeOf, store, time, timeout, uuid,
    __hasProp = {}.hasOwnProperty;

  timeout = {
    set: function(ms, fn) {
      return setTimeout(fn, ms);
    },
    clear: function(t) {
      return clearTimeout(t);
    }
  };

  interval = {
    set: function(ms, fn) {
      return setInterval(fn, ms);
    },
    clear: function(i) {
      return clearInterval(i);
    }
  };

  store = {
    set: function(key, val) {
      return localStorage.setItem(key, (isString(val) ? val : JSON.stringify(val)));
    },
    get: function(key, rev) {
      var ret;

      ret = localStorage.getItem(key);
      if (rev) {
        return JSON.parse(ret, revive);
      } else {
        return JSON.parse(ret);
      }
    },
    remove: function(key) {
      return localStorage.removeItem(key);
    }
  };

  revive = function(key, value) {
    var c;

    if (value && value.__constructor && (c = window[value.__constructor] || revive.constructors[value["class"]]) && typeof c.fromJSON === "function") {
      return cl.fromJSON(value);
    } else {
      return value;
    }
  };

  obs = function(value, owner) {
    switch (false) {
      case !(value && (value.call || value.read || value.write)):
        return ko.computed(value);
      case !(value && value.map):
        return ko.observableArray(value, owner || this);
      default:
        return ko.observable(value);
    }
  };

  uuid = (function() {
    var id, ids;

    ids = [];
    id = function(a) {
      if (a) {
        return (a ^ Math.random() * 16 >> a / 4).toString(16);
      } else {
        return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, id);
      }
    };
    return function() {
      var e;

      while (true) {
        e = id();
        if (!~ids.indexOf(e)) {
          break;
        }
      }
      ids.push(e);
      return e;
    };
  })();

  time = (function() {
    var a;

    a = obs(0);
    interval.set(1e3, function() {
      return a(new Date);
    });
    return a;
  })();

  isFn = jQuery.isFunction;

  isArr = jQuery.isArray;

  isObj = jQuery.isPlainObject;

  isNum = jQuery.isNumeric;

  isStr = function(v) {
    return typeof v === "string";
  };

  sizeOf = function(v) {
    var k;

    switch (false) {
      case !isNum(v):
        return v.split("").length;
      case !isStr(v || isArr(v)):
        return v.length;
      case !isObj(v):
        return ((function() {
          var _results;

          _results = [];
          for (k in v) {
            if (!__hasProp.call(v, k)) continue;
            _results.push(k);
          }
          return _results;
        })()).length;
      default:
        return null;
    }
  };

  koMap = function(model, map) {
    var key, value;

    for (key in map) {
      value = map[key];
      if (ko.isWriteableObservable(model[key])) {
        model[key](value);
      } else {
        model[key] = value;
      }
    }
    return model;
  };

}).call(this);

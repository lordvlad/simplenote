// Generated by CoffeeScript 1.6.2
/*
@class SimpleNote
*/


(function() {
  var SimpleNote,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SimpleNote = (function() {
    function SimpleNote() {
      this.addNodeTo = __bind(this.addNodeTo, this);
      this.textEmbed = __bind(this.textEmbed, this);
      this.textLink = __bind(this.textLink, this);
      this.textUnderline = __bind(this.textUnderline, this);
      this.textItalics = __bind(this.textItalics, this);
      this.textBold = __bind(this.textBold, this);
      this.selectionEditTags = __bind(this.selectionEditTags, this);
      this.selectionArchive = __bind(this.selectionArchive, this);
      this.selectionInvert = __bind(this.selectionInvert, this);
      this.selectionUnselect = __bind(this.selectionUnselect, this);
      this.selectionRemove = __bind(this.selectionRemove, this);
      this.save = __bind(this.save, this);
      this.revive = __bind(this.revive, this);
      this.toJSON = __bind(this.toJSON, this);
      var root,
        _this = this;

      this.timeout = null;
      this.interval = null;
      root = null;
      this.nodes = obs([]);
      this.tags = obs([]);
      this.selected = obs(function() {
        return _this.nodes.filter("selected");
      });
      this.current = obs({
        read: function() {
          return _this.nodes.find("current") || null;
        },
        write: function(node) {
          var _base, _base1, _ref;

          if (typeof (_base = _this.nodes.find("current")).current === "function") {
            _base.current(false);
          }
          return typeof (_base1 = _this.nodes.find("id", (_ref = node.id) != null ? _ref : node)).current === "function" ? _base1.current(true) : void 0;
        }
      });
      this.breadcrumbs = obs(function() {
        var _base;

        return typeof (_base = _this.current()).parents === "function" ? _base.parents() : void 0;
      });
      this.bookmarks = obs(function() {
        if (_this.nodes[1]) {
          return _this.nodes.filter("bookmarked");
        } else {
          return [];
        }
      });
      this.current.extend({
        throttle: 10
      });
      this.breadcrumbs.extend({
        throttle: 10
      });
      this.bookmarks.extend({
        throttle: 10
      });
    }

    SimpleNote.prototype.toJSON = function() {
      return {
        nodes: this.nodes(),
        tags: this.tags()
      };
    };

    SimpleNote.prototype.revive = function() {
      var data, root;

      if (data = store.get("simpleNote", true)) {
        koMap(this, data);
        this.root = this.nodes.find("id", "simpleNoteRoot");
      } else {
        root = new Node({
          smplnt: this
        });
        root.id = "simpleNoteRoot";
        this.root = root;
      }
      this.current(this.root);
      return this;
    };

    SimpleNote.prototype.save = function() {
      timout.clear(this.timeout);
      this.timeout = timeout.set(100, function() {
        return store.set(this.id, this);
      });
      return this;
    };

    SimpleNote.prototype.create = function() {
      var $doc, error, json,
        _this = this;

      try {
        json = JSON.parse(localStorage.notes, revive);
      } catch (_error) {
        error = _error;
        this.root = SimpleNote.Node({
          smplnt: this,
          parent: obs(null, {
            title: obs("home")
          })
        });
      }
      $doc = $(document);
      $doc.on("click", ".headline", function(e) {
        var $t;

        $t = $(e.target);
        if (!$t.is(".bullet, .action, .ellipsis, .additional")) {
          return $t.parents(".headline").find("title").focus();
        }
      });
      $doc.on("keydown", wre.HotKeyHandler(this.hotkeys, this));
      $doc.on("keyup, click", function() {
        return _this.save();
      });
      this.pop = $("<audio>").attr({
        src: "snd/pop.mp3"
      }).appendTo("body")[0];
      this.startPeriodicalSave();
      return this;
    };

    SimpleNote.prototype.startPeriodicalSave = function() {
      this.interval = interval.set(6e4, this.save);
      return this;
    };

    SimpleNote.prototype.stopPeriodicalSave = function() {
      interval.clear(this.interval);
      return this;
    };

    SimpleNote.prototype.selectionRemove = function() {
      if (confirm("really delete all selected outlines?")) {
        this.nodes.removeAll(this.selected());
        this.save();
      }
      return this;
    };

    SimpleNote.prototype.selectionUnselect = function() {
      var node, _i, _len, _ref;

      _ref = this.selected();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        node.selected(false)();
      }
      return this;
    };

    SimpleNote.prototype.selectionInvert = function() {
      var node, _i, _len, _ref;

      _ref = this.selected();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        node.selected(!node.selected())();
      }
      return this;
    };

    SimpleNote.prototype.selectionArchive = function() {
      var node, _i, _len, _ref;

      _ref = this.selected();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        node.archived(true)();
      }
      return this;
    };

    SimpleNote.prototype.selectionEditTags = function() {};

    SimpleNote.prototype.textBold = function() {};

    SimpleNote.prototype.textItalics = function() {};

    SimpleNote.prototype.textUnderline = function() {};

    SimpleNote.prototype.textLink = function() {};

    SimpleNote.prototype.textEmbed = function() {};

    SimpleNote.prototype.addNodeTo = function(parent, options) {
      var self;

      if (!isObj(options)) {
        options = {};
      }
      self = this;
      return Node($.extend(options, {
        parent: parent,
        smplnt: self
      }));
    };

    SimpleNote.prototype.insertNodeHere = function(options) {
      return this.addNodeTo(this.current(), options);
    };

    SimpleNote.prototype.insertNodeAfter = function(node, options) {
      return this.addNodeTo(this.current().parent(), options);
    };

    return SimpleNote;

  })();

  SimpleNote.liststyletypes = [
    {
      name: "none",
      value: []
    }, {
      name: "1, 2, 3",
      value: ["decimal"]
    }, {
      name: "1., 2., 3.",
      value: ["decimal", "dot"]
    }, {
      name: "1.1, 1.2, 1.3",
      value: ["decimal", "dot", "add"]
    }, {
      name: "a, b, c",
      value: ["lowerAlpha"]
    }, {
      name: "(a), (b), (c)",
      value: ["lowerAlpha", "dot"]
    }, {
      name: "A, B, C",
      value: ["upperAlpha"]
    }, {
      name: "(A), (B), (C)",
      value: ["upperAlpha", "dot"]
    }
  ];

}).call(this);
